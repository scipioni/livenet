#!/bin/bash

PROGNAME=${0##*/}
PROGVERSION=0.1.0

. /etc/livenet/livenet.conf

usage() {
    cat <<EOF
    Usage: $PROGNAME <command> [--help] 

    --install: install livenet on LROOT partition
    --install-with-gui: install livenet (called by ln-install service)
    [--force] --boot {local|nfs}: prepare local disk to boot on disk or nfs
    --standalone: revert image to standalone mode
    --reset-lightdm: clean lightdm between sessions
    --session-wait: exec ratpoison session with message
    --session-start: start of a session
    --user <user> --scan <path>: execute clamav and remount share in rw for user
    --shutdown: called from acpid. Used to shutdown only in lightdm login screen.
    --kiosk: kiosk session
    --kiosk-loop: kiosk session
    --monitors-clone: clone second monitor (if connected) to first monitor
    --vboxsetup: rebuild virtualbox modules
    --grub-update: run grub-update if needed

EOF
}

SHORTOPTS="hv"
LONGOPTS="help,version,test-install,install,install-with-gui,grub-update,boot:,force,standalone,sync-state,reset-lightdm,session-start,session-wait,user:,scan:,shutdown,kiosk,kiosk-loop,monitors-clone,vboxsetup"

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@")
eval set -- "$ARGS"

do_test_install() {
    # Test per la formattazione dei dischi in dual boot 
    # prendendo al tabella da file (stile OPENHPC)
    echo "test"
    eval $(lsblk -bnPdo size,name,tran,type,subsystems,serial | grep -v loop | sort -n | tail -1)
    DISK=/dev/$NAME
    echo "disk: $DISK"
    wipefs -f $DISK
    file="/ro/mnt/releases/sda_partition"
    while IFS= read -r line; do
        parted --script ${DISK} $line
        # display $line or do somthing with $line
        printf '%s\n' "$line"
    done <"$file"
}

do_install() {
    # lsblk -ndo name,tran | grep -v loop | sort

    #parted ${DISK} --script -- mkpart primary 0% 100%
    #parted --script ${DISK}  mklabel gpt mkpart primary 1MiB 100MiB mkpart primary 100MiB 200MiB
    # Seleziona il device più grosso (nuova euristica)
    eval $(lsblk -bnPdo size,name,tran,type,subsystems,serial | grep -v loop | sort -n | tail -1)

    #DEVICE=eth0
    if [ ! -f /${STATETMP}/net-*.conf ]; then
        echo "Works only in nfs mode"
        exit 1
    fi

    # Dobbiamo gestire i tre casi previsti da Rambaldelli
    # ALLLLT FERMATO TUTTO forse ECDL viene messa su VM
    # if [ "${LIVENET_ACTION}" = "install_dual" ]; then
    #     echo "Dual installation "
    # elif [ "${LIVENET_ACTION}" = "install_dual_ssd" ]; then
    #     echo "Dual ssd installation "
    # else
    #     echo "default"
    # fi
    if [ ! -e /dev/disk/by-label/${ROOT_LABEL} ]; then
        #if [ "${LIVENET_FORMAT}" = "yes" ]; then
        echo "No ${ROOT_LABEL} present, formatting disk required..."
        # Nuova euristica
        DISK=/dev/$NAME
        # DISK=/dev/sda # TODO, selezionarlo tra sda,vda,nvme
        wipefs -af $DISK

        # legacy (BIOS) booting:
        sgdisk -a1 -n1:40:2047 -t1:EF02 $DISK

        # UEFI booting
        sgdisk -n2:1M:+512M -t2:EF00 $DISK
        #parted $DISK set 2 bios_grub on # needed for embedding grub in this partition
        mkfs.fat -F32 ${DISK}2
        parted $DISK set 2 esp on

        sgdisk -n3 -t3:8300 -c3:${ROOT_LABEL} $DISK
        sleep 2
    fi
    echo "Formatting root partition by-partlabel ${ROOT_LABEL} ..."
    mkfs.ext4 -q -F -L ${ROOT_LABEL} /dev/disk/by-partlabel/${ROOT_LABEL}

    start_time=$(date +%s)

    (sleep 2 && tune2fs -i0 -c0 /dev/disk/by-partlabel/${ROOT_LABEL} >/dev/null 2>&1) &

    if [ -e /dev/disk/by-partlabel/${SWAP_LABEL} ]; then
        echo -n "Formatting swap ${SWAP_LABEL} ..."
        mkswap -L ${SWAP_LABEL} /dev/disk/by-partlabel/${SWAP_LABEL} >/dev/null 2>&1
        [ $? = 0 ] && echo "OK"
    else
        echo "Continue without partition labelled LSWAP"
    fi

    wait
    trap "umount_root; exit 1" SIGINT

    mount_root

    mkdir -p ${roottmppath}/etc/livenet # this flag and FLAG_RELEASE is needed to detect if fill not end

    # Directory esportata da NFS che contiene le releases
    mount_livenet_releases
    if [ ! $? = 0 ]; then
        exit 1
    fi

    # find latest tarball available
    # Prendo quindi l'ultima FULL e la userò in releases
    archive=$(ls ${LIVENET_RELEASES_MNT}/*-full.tar.* | tail -n1)
    if [ -z "${archive}" ]; then
        echo "No image tarball found. Create it with task commit"
        umount_root
        exit 1
    fi

    echo "Uncompressing ${archive}"
    cd ${roottmppath}
    nice tar -xpP --use-compress-program=pigz --numeric-owner --same-owner -f ${archive}
    sync_overlay
    cd / # release mount point!

    umount ${LIVENET_RELEASES_MNT}

    # # update state
    # cd /${STATETMP}
    # find etc -depth -not -name '.wh.*' -print0 | cpio --unconditional --null -pud ${roottmppath} 2>/dev/null

    # # register current update
    # ln -sf /${ALLUPDATES}/${update} ${roottmppath}${UPDATE_FLAG}

    # FIX: /tmp/.LROOT//etc/livenet/release_  senza release
    # Ho camiato tutto il ristema di RELEASE. 
    # Prende dal server in esecuzione la release e la scrive nel disco fisso della macchina
    echo "RELEASE=$(echo $(basename ${archive}) | cut -d'-' -f1)" > ${roottmppath}/etc/livenet/release
    # FIX A che serve?
    echo "LIVENET_ROOT=${LIVENET_ROOT}" >> ${roottmppath}/etc/livenet/local/host.conf
    
    echo -n " LIVENET_ROOT=${LIVENET_ROOT} " >>${roottmppath}/etc/default/grub.options
    

    # Tastiera
    cat >${roottmppath}/etc/X11/xorg.conf.d/00-keyboard.conf <<EOF
Section "InputClass"
        Identifier "system-keyboard"
        MatchIsKeyboard "on"
        Option "XkbLayout" "it,us"
        Option "XkbModel" "pc104"
EndSection
EOF
    chmod +x ${roottmppath}/etc/X11/xorg.conf.d/00-keyboard.conf
    sed -i 's/^XKBLA.*/XKBLAYOUT="it"/' ${roottmppath}/etc/default/keyboard

    echo "Installing grub ..."
    # check /sys/firmware/efi
    if [ -d "/sys/firmware/efi" ]; then
        mkdir -p ${roottmppath}/boot/efi
        mount ${DISK}2 ${roottmppath}/boot/efi
        grub-install --efi-directory=${roottmppath}/boot/efi --boot-directory=${roottmppath}/boot
        # A QUESTO PUNTO CI DEVE ESSERE la directory ${roottmppath}/boot/efi/EFI
    else
        grub-install --force --boot-directory=${roottmppath}/boot --recheck /dev/[sv]da
    fi
    for i in proc dev sys; do
        mount -o bind /$i ${roottmppath}/$i
    done

    # TODO & FIX sed $PROFILE in ${roottmppath}/etc/grub.cfg
    # nel client trovo ancora a default il profilo
    # e l'alternatives a default
    sed -i "s/default/${PROFILE}/g" ${roottmppath}/etc/default/grub
    cp ${roottmppath}/etc/default/grub ${roottmppath}/grub_cancellami
    chroot ${roottmppath} update-grub
    echo "Saving profile ${PROFILE}"
    chroot ${roottmppath} /bin/sh -c ". /etc/livenet/livenet.conf; do_update_alternatives /etc/livenet/local/livenet.conf"
    chroot ${roottmppath} /bin/sh -c "ln -sf ../run/systemd/resolve/stub-resolv.conf /etc/resolv.conf"

    chroot ${roottmppath} /bin/sh -c "mkdir -p /etc/dconf/profile"
    chroot ${roottmppath} /bin/sh -c "mkdir -p /etc/dconf/db/local.d"
    cat >${roottmppath}/etc/dconf/profile/user <<EOF
user-db:user
system-db:local
EOF

    cat >${roottmppath}/etc/dconf/db/local.d/01-keyboard <<EOF
[org/gnome/desktop/input-sources]
per-window=false
sources=[('xkb', 'it'), ('xkb', 'us+symbolic')]
EOF
    chroot ${roottmppath} /bin/sh -c "dconf update"

    chroot ${roottmppath} /bin/sh -c "chmod 765 /etc/livenet/kiosk"

    for i in proc dev sys; do
        umount ${roottmppath}/$i
    done

    umount_root

    finish_time=$(date +%s)
    echo "Time elapsed: $(($((finish_time - start_time)) / 60)) min."
}

do_boot() {
    logger -n ${SYSLOG_IP} -P ${SYSLOG_PORT} -t "do_boot" "Start with ROOTMOUNTED=$1"
    ROOTMOUNTED=$1
    echo $ROOTMOUNTED >/etc/esecuzione
    for module in $(ls /etc/livenet/boot/*.default /etc/livenet/boot/*.${ROOTMOUNTED} | sort); do
        mm=$(basename ${module})
        if [ -x ${module} ]; then
            do_log "Configuring ${mm}.${ROOTMOUNTED}"
            . ${module} ""
        else
            do_log "Skip ${mm}"
        fi
    done
    logger -n ${SYSLOG_IP} -P ${SYSLOG_PORT} -t "do_boot" "Exiting"
}

do_standalone() {
    for f in /etc/initramfs-tools/initramfs.conf \
        /etc/network/interfaces \
        /etc/rsyslog.conf \
        /etc/auto.master \
        /etc/kernel-img.conf \
        /etc/kernel/postinst.d/zz-update-grub; do
        [ -h ${f} ] && rm -f ${f}
        cp -a /livenet/${f}.local.standalone ${f}
        #update-alternatives --remove-all $(basename $f) >/dev/null 2>&1
    done

    cp -a /etc/fstab.local.default /etc/fstab

    rm -f /etc/init/network-manager.override

    rm -f /etc/kernel/postinst.d/zz-livenet

    chmod +x /usr/lib/accountsservice/accounts-daemon
    chmod +x /etc/init.d/unattended-upgrades
    chmod +x /usr/bin/zeitgeist-datahub
    chmod +x /usr/bin/zeitgeist-daemon
    chmod +x /usr/lib/zeitgeist/zeitgeist-fts

    rm -f /usr/sbin/policy-rc.d

    # revert without ldap
    auth-client-config -a -p lac_ldap -r >/dev/null 2>&1

    apt-get remove --purge --yes nslcd nscd

    update-initramfs -u

    pam-auth-update

    chmod -x /etc/livenet/boot/*
    rm /etc/debian_chroot
    userdel guest

    # enable dynamic resolvconf
    dpkg-reconfigure resolvconf
    echo -n >/etc/resolvconf/resolv.conf.d/original

    # or commenting dns=dnsmasq in /etc/NetworkManager/NetworkManager.conf
}

do_sync_state() {
    export LANG=en

    SERVERRW=$(echo ${LIVENET_ROOT} | sed -n -r "s|^(.+):.+$|\1| p")
    [ -z "${SERVERRW}" ] && (echo "no SERVERRW defined" && exit 1)

    MAC=$(ifconfig ${DEVICE} | sed -n -r "s|^.*HWaddr ([A-Za-z0-9:]+).*$|\1| p" | tr -d ':' | tr '[a-z]' '[A-Z]')

    mount -n -o rw,atime -o ${NFSOPTS} ${SERVERRW}:${STATENFS}/${MAC}_${RELEASE} /${STATETMP}/persistent

    cd /${STATETMP}

    # o così
    rsync -av --delete --exclude '*.wh.*' etc persistent

    # o pomì
    # rm -fR persistent/*
    #find etc -depth -not -name '.wh.*' -print0 | cpio --null -pud persistent 2>/dev/null

    umount /${STATETMP}/persistent
}

do_session_wait() {
    ratpoison &
    do_setbg login
    for i in $(seq 20 10 99) 9999; do
        sleep $(($i / 2))
        echo $i
    done | zenity --progress --no-cancel --auto-close --width 400 --text "Aggiornamento in corso ..."
}

do_scan() {
    SHARE=$1
    USER=$2

    export DISPLAY=:0.0
    USERHOME=$(getent passwd ${USER} | awk -F: '{print $6}')
    export XAUTHORITY=${USERHOME}/.Xauthority

    if [ ! -x /usr/bin/clamscan ]; then
        zenity --error --text "Clamav non trovato"
        return
    fi

    flagvirus=/tmp/.foundviruses
    clamscan --exclude=.*.[Cc][Hh][Kk] --infected -r -v ${SHARE} | tee >(grep FOUND >${flagvirus}) | zenity --progress --pulsate --auto-close --text "Scansione in corso ..."
    scandialog=$?

    if [ ${scandialog} != 0 ]; then
        rm -f ${flagvirus}
        # lasciamo montato il drive per renderlo inutilizzabile
        return
    fi
    virus=$(cat ${flagvirus} | wc -l)
    if [ $virus -gt 0 ]; then
        zenity --error --text "Attenzione\!\nTrovati Virus\!\nNumero di minacce rilevate: $virus\n\nREPORT\n____________\n$(cat ${flagvirus})" &
        sleep 1
        rm -f ${flagvirus}
        # lasciamo montato il drive per renderlo inutilizzabile
        return
    fi
    rm -f ${flagvirus}
    mount -o remount,uid=${USER},rw ${SHARE} >/dev/null 2>&1
    if [ $? = 0 ]; then
        zenity --info --text "Aprire l'icona USB sul desktop" &
    fi
}

do_kiosk() {
    ratpoison &
    wmpid=$!
    sleep 2 # Wait until ratpoison starts up.
    PATH=/opt/firefox:${PATH}

    if [ -f ~/.run ]; then
        exec ~/.run
    else
        if [ -f ~/.url_to_open ]; then
            URL=$(cat ~/.url_to_open)
        fi
        exec firefox ${URL}
    fi
}

do_kiosk_loop() {
    ratpoison &
    #Disable right mouse button
    xmodmap -e "pointer = 1 2 11"
    #Enable us keyboard for user
    setxkbmap us
    #Run Xscreensaver
    xscreensaver -nosplash &
    wmpid=$!
    sleep 2 # Wait until ratpoison starts up.
    PATH=/opt/firefox:${PATH}

    if [ -f ~/.url_to_open ]; then
        URL=$(cat ~/.url_to_open)
    fi

    while true; do
        firefox ${URL}
    done

    wait $wmpid
}

do_monitors_clone() {
    PORTS=$(xrandr -q | grep " connected" | awk '{ print $1 }')
    PORT1=$(echo $PORTS | awk '{print $1}')
    PORT2=$(echo $PORTS | awk '{print $2}')

    if [ -n "$PORT1" ] && [ -n "$PORT2" ]; then
        MODE=$(xrandr -q | grep -A1 " connected" | egrep "^\s+[0-9]+x[0-9]+" | awk '{ print $1 }' | sort -h | head -n 1)
        echo "Dual monitor detected, setting $PORT1 and $PORT2 to $MODE"
        set -x
        xrandr --output ${PORT1} --mode ${MODE}
        xrandr --output ${PORT2} --mode ${MODE} --same-as ${PORT1}
        if [ $? != 0 ]; then # non esiste una risoluzione in comune, passo a una risoluzione di compromesso
            MODE=1024x768
            echo "No common resolution, try workaround $MODE"
            xrandr --output ${PORT1} --mode ${MODE}
            xrandr --output ${PORT2} --mode ${MODE} --same-as ${PORT1}
        fi
    else
        echo "No dual monitor detected, exit"
    fi
}

do_vboxsetup() {
    PACKAGE=$(dpkg -l | egrep "ii\s+virtualbox" | awk '{ print $2 }')
    if [ -z "${PACKAGE}" ]; then
        echo "Virtualbox is not installed"
        exit 1
    fi
    VERSION=$(dpkg -s ${PACKAGE} | sed -n 's|^Version: \([0-9\.]\+\).*|\1|p')
    /usr/share/virtualbox/src/vboxhost/do_dkms uninstall vboxhost vboxdrv vboxnetflt vboxnetadp
    cat >/tmp/dkms <<EOF
#!/bin/sh

KERNEL_VERSION=\$( ls -X /lib/modules | tail -n1 )
exec /usr/sbin/dkms -k \${KERNEL_VERSION} \$*
EOF

    chmod +x /tmp/dkms
    export PATH=/tmp:${PATH}
    /usr/share/virtualbox/src/vboxhost/do_dkms install vboxhost ${VERSION}
    rm -f /tmp/dkms
}

do_grub_update() {
    if [ /etc/default/grub -nt /boot/grub/grub.cfg ] ||
        [ /etc/grub.d/01_security -nt /boot/grub/grub.cfg ] ||
        [ /boot/initrd -nt /boot/grub/grub.cfg ] ||
        [ /etc/grub.d/30_os-prober -nt /boot/grub/grub.cfg ]; then
        echo "Updating grub"
        /usr/sbin/update-grub
    fi
}

check_jail() {
    if [ ! "$(</etc/hostname)" = "$(hostname)" ]; then
        echo "This program run only on live client, not in chroot jail. Use ln-mng instead." 1>&2
        exit 1
    fi
}

do_ramflush() {
    sudo sync
    sudo /sbin/sysctl vm.drop_caches=3

}
do_killtty() {
if [[ ${USER} =~ (moodle|moodleext) ]] ; then
                for i in `seq 1 6`;
                do
                        outid=`pgrep -t tty"$i" bash`
                        if [ $? = 0 ]; then
                                kill -9 $outid
                        fi
                done
                cp /etc/security/access.conf.${USER} /etc/security/access.conf

        else
                cp /etc/security/access.conf.default /etc/security/access.conf
        fi
}

while true; do
    case $1 in
    -h | --help)
        usage
        exit 0
        ;;
    -v | --version)
        echo "$PROGVERSION"
        ;;
    --test-install)
        check_jail
        do_test_install
        ;;
    --install)
        TIME_NOW=$(date +%s)
        check_jail
        do_install
        logger -n ${SYSLOG_IP} -P ${SYSLOG_PORT} -t "install" "Execution time: $(( $(date +%s) - $TIME_NOW )) seconds"
        if [ "${LIVENET_ACTION_END}" = "halt" ]; then
            halt -p
        fi
        if [ "${LIVENET_ACTION_END}" = "reboot" ]; then
            reboot -f
        fi
        break
        ;;
    --install-with-gui)
        if [ "${LIVENET_ACTION}" != "install" ] && [ "${LIVENET_ACTION}" != "install_force" ]; then
            echo "no livenet_action=install in cmdline"
            exit 0
        fi
        TIME_NOW=$(date +%s)
        check_jail
        update-alternatives --set lightdm.conf /etc/lightdm/lightdm.conf.nfs.special
        systemctl restart display-manager
        do_install
        sleep 5
        update-alternatives /etc/lightdm/lightdm.conf
        systemctl restart display-manager
        logger -n ${SYSLOG_IP} -P ${SYSLOG_PORT} -t "install-with-gui" "Execution time: $(( $(date +%s) - $TIME_NOW )) seconds"
        if [ "${LIVENET_ACTION_END}" = "halt" ]; then
            halt -p
        fi
        if [ "${LIVENET_ACTION_END}" = "reboot" ]; then
            reboot -f
        fi
        break
        ;;

    --force)
        FORCE=true
        ;;
    --boot)
        shift
        ROOTMOUNTED=${1:=nfs}
        [ -n "${FORCE}" ] || check_jail
        do_boot ${ROOTMOUNTED}
        break
        ;;
    --standalone)
        do_standalone
        exit $?
        ;;
    --sync-state)
        do_sync_state
        break
        ;;
    --reset-lightdm)
        rm -fR /var/lib/lightdm/.cache/*
        break
        ;;
    --session-wait)
        do_session_wait
        break
        ;;
    --session-start)
        do_killtty
        break
        ;;    
    --user)
        shift
        USER=$1
        ;;
    --scan)
        shift
        do_scan $1 ${USER}
        exit 0
        ;;
    --shutdown)
        ck-list-sessions | grep -q LoginWindow
        if [ $? = 0 ]; then
            /sbin/shutdown -h now "Power button pressed"
        fi
        break
        ;;
    --kiosk)
        do_kiosk
        break
        ;;
    --kiosk-loop)
        do_kiosk_loop
        break
        ;;
    --monitors-clone)
        do_monitors_clone
        break
        ;;
    --vboxsetup)
        shift
        do_vboxsetup $1
        exit 0
        ;;
    --grub-update)
        do_grub_update
        break
        ;;
    --)
        shift
        break
        ;;
    *)
        shift
        break
        ;;
    esac
    shift
done

exit 0
