#!/bin/sh

PREREQ="dhcp"
DESCRIPTION="Mount remote root"

prereqs()
{
       echo "$PREREQ"
}

case $1 in
prereqs)
       prereqs
       exit 0
       ;;
esac
echo "ENTERING livenet-top::root_remote"
echo $DESCRIPTION

WORKDIR=.workdir

. /scripts/functions
. /scripts/functions-livenet
log_begin_msg "$DESCRIPTION"

if [ -n "${ROOT}" ]; then
    do_log "skip remote mount"  
    exit 0
fi

sync_state_nfs ()
{
    MAC=$( ifconfig ${DEVICE} | sed -n -r "s|^.*HWaddr ([A-Z0-9:]+).*$|\1| p" | tr -d ':' )
    SERVERRW=$( echo ${LIVENET_ROOT} | sed -n -r "s|^(.+):.+$|\1| p" )
    
    mkdir -p ${rootmnt}/${STATETMP}/persistent
    # nfsv3
    mount -t nfs -o rw,${NFSOPTS} ${SERVERRW}:${STATENFS} ${STATETMP}/persistent
    # nfsv4
    #mount.nfs -n ${SERVERRW}:${STATENFS} ${STATETMP}/persistent -o ${NFSOPTSV4}
    if [ $? = 0 ]; then
        STATE=${STATETMP}/persistent/${MAC}_${RELEASE}
        
        if [ ! -f ${STATE}/${FLAG_RELEASE} ]; then
            do_log "New release detected ($RELEASE), reset state"
            rm -fR ${STATE}
            log_end_msg
        fi

        mkdir -p ${STATE}/etc/livenet 
        for x in /run/net-*.conf /tmp/net-*conf; do
            echo "SERVERRW=${SERVERRW}" >> ${x}
            echo "MAC=${MAC}" >> ${x}
        done
        cp -a ${STATE}/etc ${rootmnt}/${STATETMP}
        umount ${STATETMP}/persistent
    else
        do_log "Cannot sync state, skip"
    fi
}

LANG=en

#modprobe nfsv3 >/dev/null &
modprobe nfsv4 >/dev/null &

go_log "Environment "
do_log "    root ----> ${ROOT}"
do_log "    rootmnt ----> ${rootmnt}"
do_log "    nfsro ----> ${NFSRO}}"
do_log "    statetmp ----> ${STATETMP}}"
do_log "    workdir ----> ${WORKDIR}}"
do_log "    mount.nfs -n -r ${LIVENET_ROOT} ${NFSRO} -o ${NFSOPTSV4}"

# Monta un file system in ram
mount -t tmpfs tmpfs ${rootmnt} -o rw,mode=0755 

cd ${rootmnt}
cp -a /dev .
mkdir -p ${rootmnt}/${NFSRO}
mkdir ${rootmnt}/proc ${rootmnt}/sys ${rootmnt}/media 
mkdir -p  ${rootmnt}/${STATETMP}/var ${rootmnt}/${STATETMP}/etc ${rootmnt}/${STATETMP}/home 
mkdir -p  ${rootmnt}/${WORKDIR}/var ${rootmnt}/${WORKDIR}/etc ${rootmnt}/${WORKDIR}/home
mkdir -m 1777 ${rootmnt}/tmp
touch ${rootmnt}/fastboot # checkroot skip fsck on root partition

# Aspetta che il modulo nfsv4 sia installato
wait # nfs module go in background 

# nfsv3
#mount -t nfs -o ro,${NFSOPTS} ${LIVENET_ROOT} ${NFSRO} 


#mount -t nfs -o ro,vers=4 ${LIVENET_ROOT} ${NFSRO} 

#nfsv4
mount.nfs -n -r ${LIVENET_ROOT} ${NFSRO} -o ${NFSOPTSV4}
if [ ! $? = 0 ]; then
    do_log "Cannot mount nfs root, reboot"

    sleep 10
    reboot
fi

for folder in bin boot home lib lib32 lib64 libx32 media mnt opt root sbin opt root sbin usr;  do
    [ -d ${NFSRO}/${folder} ] && ln -s ${NFSRO}/${folder} ${folder}
done

#sync_state_nfs


# overlayfs
do_log "==== Overlayfs ===="
mkdir ${rootmnt}/var ${rootmnt}/etc  && do_log "Creazione ${rootmnt}/var ${rootmnt}/etc !!"

mount -t overlay overlay -o xino=off,index=off,nfs_export=off,lowerdir=${NFSRO}/etc,upperdir=${STATETMP}/etc,workdir=${WORKDIR}/etc etc
mount -t overlay overlay -o xino=off,index=off,nfs_export=off,lowerdir=${NFSRO}/var,upperdir=${STATETMP}/var,workdir=${WORKDIR}/var var
mount -t overlay overlay -o xino=off,index=off,nfs_export=off,lowerdir=${NFSRO}/home,upperdir=${STATETMP}/home,workdir=${WORKDIR}/home home

# for idmapd
mkdir -p /var/lib/nfs/rpc_pipefs
mount -t rpc_pipefs rpc_pipefs /var/lib/nfs/rpc_pipefs
#rpc.idmapd

do_log "touch ${rootmnt}/${FLAG_RELEASE}"
do_log "touch ${rootmnt}/${FLAG_NFS}"
touch ${rootmnt}/${FLAG_RELEASE}
touch ${rootmnt}/${FLAG_NFS} # flag

#do_debug_shell
rm ${rootmnt}/etc/hosts # without this there is a huge time for a unknown timeout
do_log "127.0.0.1 localhost lnode > ${rootmnt}/etc/hosts"
echo "127.0.0.1 localhost lnode" > ${rootmnt}/etc/hosts
rm ${rootmnt}/etc/hostname
do_log "lnode > ${rootmnt}/etc/hostname"
echo "lnode" > ${rootmnt}/etc/hostname
rm ${rootmnt}/etc/resolv.conf
do_log "nameserver ${DNS} > ${rootmnt}/etc/resolv.conf"
echo "nameserver ${DNS}" > ${rootmnt}/etc/resolv.conf

for x in /run/net-*.conf /tmp/net-*.conf; do
    ROOTMOUNTED=nfs
    do_log "ROOTMOUNTED=${ROOTMOUNTED} >> ${x}"
    echo "ROOTMOUNTED=${ROOTMOUNTED}" >> ${x}
done

log_end_msg
#do_debug_shell
echo "LEAVING livenet-top::root_remote"

