# https://taskfile.dev

version: '3'

dotenv: [".env"]

tasks:
  default:
    cmds:
      - go-task -l
    silent: true
  
  init:
    vars:
      MY_VAR: pre-commit post-merge
    cmds:
      - for: { var: MY_VAR, as: FILE }
        cmd:  cp -af ./scripts/{{ .FILE }} $(git rev-parse --show-toplevel)/.git/hooks/

  root:
    cmds:
      - echo "{{.TASKFILE_DIR}}"

  build:
    desc: build livenet container
    cmds:
      - |
        sed -i "s/RELEASE=.*/RELEASE={{.RELEASE}}/" .env
        #echo "RELEASE={{.RELEASE}}" > overlay/etc/livenet/release  
        RELEASE={{.RELEASE}} BUILDKIT_PROGRESS=plain ${_compose}  build 
        sudo rm -f releases/$(date +%Y%m%d).*
        mkdir -p runtime releases
        touch runtime/bash_history
        RELEASE={{.RELEASE}} ${_compose} up -d --remove-orphans
        sleep 5
        ${_docker} export ${NODE} --output="releases/{{.RELEASE}}-full.tar"
        pigz releases/{{.RELEASE}}-full.tar       
    vars:
      GIT_PATH: 
        sh: echo $(git rev-parse --show-toplevel)
      RELEASE: 
        sh: date +%Y%m%d.00.00
    preconditions:
      - sh: test -f  "$(git rev-parse --show-toplevel)/.git/hooks/pre-commit"
        msg: "{{.GIT_PATH}}/.git/hooks/pre-commit not found.\n**** Please, launch task init ****"
      - sh: test -f  "$(git rev-parse --show-toplevel)/.git/hooks/post-merge"
        msg: "{{.GIT_PATH}}/.git/hooks/post-merge not found.\n**** Please, launch task init ****"


  start:
    desc: start livenet container
    cmds:
      - ${_compose} up -d --remove-orphans

  cli:
    desc: login into container
    cmds:
      - ${_compose} exec lnode bash        

  diff:
    desc: show changes in server with respect docker image
    cmds:
      - ${_docker} diff ${NODE}
# FIXME Task commit deve controllare se c'Ã¨ la full e uscire in caso contrario 
  commit_old:
    desc: task commit 
    cmds:
      - |
        ID=$(${_docker} container ls --all --quiet --no-trunc --filter "name=${NODE}")
        NEW_RELEASE=$(scripts/release.sh)
        echo "NEW RELEASE: ${NEW_RELEASE}"
        ${_docker} diff ${NODE} | ${_compose} exec -T lnode ln-mng --commit $NEW_RELEASE
        ${_docker} commit ${ID} livenet/node:${NEW_RELEASE}
        #echo "RELEASE=${NEW_RELEASE}" > overlay/etc/livenet/release
        sed -i "s/RELEASE=.*/RELEASE=${NEW_RELEASE}/" .env
        ${_compose} down      

  commit:
    desc: task commit 
    cmds:
      - |
        NEW_COMMIT=$(scripts/release.sh commit)
        
        echo "NEW RELEASE: ${NEW_COMMIT}"

        ID=$(${_docker} container ls --all --quiet --no-trunc --filter "name=${NODE}")
        
        ${_docker} diff ${NODE} | ${_compose} exec -T ${NODE} ln-mng --commit $NEW_COMMIT
        ${_docker} commit ${ID} livenet/node:${NEW_COMMIT}
        sed -i "s/RELEASE=.*/RELEASE=${NEW_COMMIT}/" .env
        ${_compose} down -t 60
        RELEASE=${NEW_COMMIT} ${_compose} up -d --remove-orphans

  release_old:
    desc: create a major release.
    cmds:
      - |
        RELEASE=$(scripts/release.sh release)

        #echo NEW RELEASE: $RELEASE
        #[[ $RELEASE -lt $(cat overlay/etc/livenet/release) ]] && exit 1
        #echo ${RELEASE} > overlay/etc/livenet/release
        #sed -i "s/RELEASE=.*/RELEASE=${RELEASE}/" .env
        #${_docker} export ${NODE} --output="releases/${RELEASE}-full.tar"
        #pigz releases/${RELEASE}-full.tar
  release:
    desc: create a major release.
    cmds:
      - task: commit
      - |
        RELEASE=$(scripts/release.sh release)
        echo NEW RELEASE: $RELEASE
        #echo ${RELEASE} > overlay/etc/livenet/release
        sed -i "s/RELEASE=.*/RELEASE=${RELEASE}/" .env
        ${_docker} export ${NODE} --output="releases/${RELEASE}-full.tar"
        pigz releases/${RELEASE}-full.tar
        ${_compose} down -t 60
        ${_compose} up -d --remove-orphans        

  destroy:
    desc: destroy livenet  and clean the environment
    cmds:
      - sudo rm -f releases/*
      - sed -i "s/RELEASE=.*/RELEASE=/" .env
      - ${_compose} down -t 60 || true
      - echo "docker images --filter "dangling=true" -q --no-trunc"
      - ${_docker} images | grep livenet/node | awk '{print $3}' | xargs ${_docker} rmi --force || true
      - rm -f runtime/vm.qcow2

  reset:
    desc: reset the system for a clean start
    cmds:
      - task: destroy
      - task: build
      - task: start
      - sleep 5
      - task: release
        vars:
          RELEASE: 20230801.00

  mount:
    desc: show the exported nfs root filesystem
    cmds:
      - mkdir -p /tmp/test
      - sudo mount -t nfs -o vers=4,loud,retry=0,timeo=5 192.168.124.1:/ /tmp/test
      - ls /tmp/test
      - sudo umount /tmp/test

  network:
    desc: create livenet network
    cmds:
      - |
        sudo virsh net-info livenet && sudo virsh net-destroy livenet || true
        sudo virsh net-define libvirt/net-livenet.xml
        sudo virsh net-start livenet
        ${_compose} down

  logs:
    desc: show logs
    cmds:
      - tail -f -n 100 /tmp/log/syslog

  rsyslog:
    desc: "launch a rsyslog server"
    cmds: 
      - bash ./scripts/rsyslog.sh

  vm:disk:
    desc: create a raw disk for the test VM client
    cmds:
      - |
        [ -f ${DISK} ] || qemu-img create -f qcow2 -o preallocation=metadata ${DISK} 60G

  vm:bios:
    desc: "boot vm in uefi: see 4.3 on https://wiki.archlinux.org/title/QEMU"
    cmds:
      - task: vm:disk
      - |
        qemu-system-x86_64 -nographic -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -drive id=vda,file=${DISK} \
          -boot n

  vm:spice:
    desc: "spice client"
    cmds:
      - sleep 1
      - spicy -h localhost -p 5910
  
  vm:bios:local:
    desc: "boot vm in uefi: see 4.3 on https://wiki.archlinux.org/title/QEMU"
    cmds:
      - task: vm:disk
      - |
        qemu-system-x86_64 -nographic -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -spice port=5910,addr=0.0.0.0,disable-ticketing \
          -drive id=vda,file=${DISK} \
          -boot d
  
  vm:efi:local:
    desc: "boot vm in uefi: see 4.3 on https://wiki.archlinux.org/title/QEMU"
    cmds:
      - task: vm:disk
      - |
        qemu-system-x86_64 -nographic -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -spice port=5910,addr=0.0.0.0,disable-ticketing \
          -drive if=pflash,format=raw,unit=0,readonly=on,file=/usr/share/edk2-ovmf/x64/OVMF_CODE.fd \
          -drive if=pflash,format=raw,unit=1,file=/tmp/OVMF_VARS.fd \
          -drive id=vda,file=${DISK} \
          -boot d

  vm:
    desc: "boot local disk vm with spice client"
    deps: [vm:spice, vm:efi:local]


  vm:cd:
    desc: "boot systemrescuecd"
    cmds:
      - |
        [ -f runtime/systemrescue-10.01-amd64.iso ] || https://fastly-cdn.system-rescue.org/releases/10.01/systemrescue-10.01-amd64.iso
        qemu-system-x86_64 -nographic -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -cdrom runtime/systemrescue-10.01-amd64.iso

  vm:efi:
    desc: "boot vm in uefi: see 4.3 on https://wiki.archlinux.org/title/QEMU"
    cmds:
      - task: vm:disk
      - |
        cp /usr/share/edk2-ovmf/x64/OVMF_VARS.fd /tmp/OVMF_VARS.fd
        qemu-system-x86_64 -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -drive if=pflash,format=raw,unit=0,readonly=on,file=/usr/share/edk2-ovmf/x64/OVMF_CODE.fd \
          -drive if=pflash,format=raw,unit=1,file=/tmp/OVMF_VARS.fd \
          -drive id=vda,file=${DISK} \
          -boot d
  vm:efi1:
    desc: "boot vm in uefi: see 4.3 on https://wiki.archlinux.org/title/QEMU"
    cmds:
      - |
        [ -f ./runtime/vm1.qcow2 ] || qemu-img create -f qcow2 -o preallocation=metadata ./runtime/vm1.qcow2 30G
        cp /usr/share/edk2-ovmf/x64/OVMF_VARS.fd /tmp/OVMF_VARS1.fd
        cp /usr/share/edk2-ovmf/x64/OVMF_CODE.fd /tmp/OVMF_CODE1.fd
        qemu-system-x86_64 -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -drive if=pflash,format=raw,unit=0,readonly=on,file=/tmp/OVMF_CODE1.fd \
          -drive if=pflash,format=raw,unit=1,file=/tmp/OVMF_VARS1.fd \
          -drive id=vda,file=./runtime/vm1.qcow2 \
          -boot d
  vm:ssh:
    desc: "connect to client node (vm test only)"
    cmds:
      - ssh root@192.168.124.18

