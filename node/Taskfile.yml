# https://taskfile.dev

version: '3'

dotenv: [".env"]

tasks:
  default:
    cmds:
      - go-task -l
    silent: true

  build:
    desc: build li
    cmds:
      - BUILDKIT_PROGRESS=plain docker compose build 
      #- docker export $(docker create ${IMAGE}) --output="livenet.tar"

  start:
    cmds:
      - mkdir -p runtime
      - touch runtime/bash_history
      # - sudo ip link add dummy0 type dummy || true
      # - sudo ip link set dummy0 up
      # - sudo ip link set dummy0 master livenet || true
      #- sudo iptables -P FORWARD ACCEPT
      - docker compose up
      #- docker run --name lnode -it -d -p 2049:2049 -p 20048:20048 ${IMAGE} || true

  logs:
    cmds:
      - sudo journalctl -f

  cli:
    cmds:
      - docker compose exec lnode bash
      #- docker run --name lnode -it -d ${IMAGE} || true
      #- task: run
      #- docker exec -it ${NODE} bash

  diff:
    cmds:
      - docker diff ${NODE}

  commit:
    desc: task commit -- 0.2
    vars:
      Id: Id
    cmds:
      - |
        ID=$(docker container ls --all --quiet --no-trunc --filter "name=${NODE}")
        docker commit ${ID} livenet/node:{{.CLI_ARGS}}

  destroy:
    cmds:
      - docker compose down
      - docker images | grep livenet/node | awk '{print $3}' | xargs docker rmi
      #- docker container stop ${NODE} || true
      #- docker container rm ${NODE}


  mount:
    cmds:
      - mkdir -p /tmp/test
      - sudo mount -t nfs -o vers=4,loud,retry=0,timeo=5 192.168.124.1:/ /tmp/test
      - ls /tmp/test
      - sudo umount /tmp/test

  # kernel:copy:
  #   cmds:
  #     - docker cp lnode:/boot/initrd.img-5.15.0-76-generic ../server/boot/jammy/initrd
  #     - docker cp lnode:/boot/vmlinuz-5.15.0-76-generic ../server/boot/jammy/kernel


  network:
    desc: create livenet network
    cmds:
      - |
        sudo virsh net-info livenet && sudo virsh net-destroy livenet || true
        sudo virsh net-define libvirt/net-livenet.xml
        sudo virsh net-start livenet
        # docker network rm livenet_macvlan 2>/dev/null || true 
        # docker network create -d macvlan --subnet=192.168.124.0/24 --gateway=192.168.124.1 --aux-address="host=192.168.124.223" --ip-range=192.168.124.192/27  -o parent=livenet livenet_macvlan || true
        # sudo ip link add mcvlan-ingress link livenet type macvlan mode bridge
        # sudo ip addr add 192.168.124.223 dev mcvlan-ingress
        # sudo ip link set mcvlan-ingress up
        # sudo ip route add 192.168.124.192/27 dev mcvlan-ingress
        docker compose down

  vm:disk:
    cmds:
      - |
        [ -f ${DISK} ] || qemu-img create -f qcow2 -o preallocation=metadata ${DISK} 60G

  vm:bios:
    desc: "boot vm in uefi: see 4.3 on https://wiki.archlinux.org/title/QEMU"
    cmds:
      - task: vm:disk
      - |
        qemu-system-x86_64 -nographic -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -drive id=vda,file=${DISK} \
          -boot n

  vm:cd:
    desc: "boot systemrescuecd"
    cmds:
      - |
        [ -f runtime/systemrescue-10.01-amd64.iso ] || https://fastly-cdn.system-rescue.org/releases/10.01/systemrescue-10.01-amd64.iso
        qemu-system-x86_64 -nographic -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -cdrom runtime/systemrescue-10.01-amd64.iso

  vm:efi:
    desc: "boot vm in uefi: see 4.3 on https://wiki.archlinux.org/title/QEMU"
    cmds:
      - |
        cp /usr/share/edk2-ovmf/x64/OVMF_VARS.fd /tmp/OVMF_VARS.fd
        qemu-system-x86_64 -smp 2 -m 2048 -enable-kvm -net nic,netdev=net0 -netdev bridge,br=livenet,id=net0 \
          -drive if=pflash,format=raw,unit=0,readonly=on,file=/usr/share/edk2-ovmf/x64/OVMF_CODE.fd \
          -drive if=pflash,format=raw,unit=1,file=/tmp/OVMF_VARS.fd
